"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6096],{82577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment/Compiling-Graph-With-Custom-Fragment","title":"Implementing Compilation Logic For Custom Fragments","description":"Joint provide a built-in compilation & error reporting system for Joint Graphs.","source":"@site/docs/guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment/Compiling-Graph-With-Custom-Fragment.md","sourceDirName":"guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment","slug":"/guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment/","permalink":"/Unreal-Joint-Documentation/docs/guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/Joint/Advanced/Compiling-Graph-With-Custom-Fragment/Compiling-Graph-With-Custom-Fragment.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Implementing Compilation Logic For Custom Fragments","sidebar_position":1,"toc_min_heading_level":2,"toc_max_heading_level":6},"sidebar":"GuideSidebar","previous":{"title":"Advanced","permalink":"/Unreal-Joint-Documentation/docs/category/advanced"},"next":{"title":"Debugging Graph With Joint Debugger","permalink":"/Unreal-Joint-Documentation/docs/guide_docs/Joint/Advanced/Debugging-Graph-With-Joint-Debugger/"}}');var o=n(74848),s=n(28453);const r={title:"Implementing Compilation Logic For Custom Fragments",sidebar_position:1,toc_min_heading_level:2,toc_max_heading_level:6},a=void 0,d={},c=[{value:"What is Compilation &amp; Error Reporting System of Joint?",id:"what-is-compilation--error-reporting-system-of-joint",level:2},{value:"How to make your custom fragment compile-aware",id:"how-to-make-your-custom-fragment-compile-aware",level:2},{value:"For C++ (Runtime Node Instance Side)",id:"for-c-runtime-node-instance-side",level:3},{value:"For C++ (Editor Node Side)",id:"for-c-editor-node-side",level:3},{value:"For Blueprints",id:"for-blueprints",level:3}];function l(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Joint provide a built-in compilation & error reporting system for Joint Graphs."}),"\n",(0,o.jsx)(t.p,{children:"In this document, we will explore how to implement compilation logic for your custom fragments by overriding the relevant functions."}),"\n",(0,o.jsx)(t.h2,{id:"what-is-compilation--error-reporting-system-of-joint",children:"What is Compilation & Error Reporting System of Joint?"}),"\n",(0,o.jsx)(t.p,{children:"Joint Manager has a built-in compilation feature that informs you some info about the graph settings, warns you about the possible issues and errors on the graph and nodes."}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:'As the name "compilation" suggests, this system is not only for checking out errors and warnings, but also for optimizing the graph and nodes for runtime execution behind the scenes - but it\'s not available to be customized yet, thus we focus on error reporting feature for now.'})}),"\n",(0,o.jsx)(t.p,{children:"Any modification on the graph and Joint manager asset will execute compilation, and automatically check out the possible errors for the Joint manager."}),"\n",(0,o.jsxs)(t.p,{children:["Joint Editor now has ",(0,o.jsx)(t.strong,{children:"Compile Result"})," tab that displays the result of the compilation. You can double-click the row or hyperlink to go to the node that caused the issue."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_1.png",src:n(57306).A+"",width:"2013",height:"975"})}),"\n",(0,o.jsx)(t.p,{children:"Graph nodes will display the compile result indicator on the overlay. You can check out the issues have been raised for the node by hovering over the indicator directly."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img.png",src:n(2782).A+"",width:"919",height:"451"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_2.png",src:n(87473).A+"",width:"1524",height:"250"})}),"\n",(0,o.jsx)(t.p,{children:"Error and warning will be displayed on the content cooking and packaging process of the project. Especially when the error has been raised, it will abort the cooking and packaging process."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_6.png",src:n(13813).A+"",width:"1881",height:"641"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_7.png",src:n(44716).A+"",width:"1370",height:"775"})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-make-your-custom-fragment-compile-aware",children:"How to make your custom fragment compile-aware"}),"\n",(0,o.jsx)(t.p,{children:"If your fragment needs to implement custom compilation logic, you have to override relevant functions to attach messages to the compilation result."}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"You don't need to implement compilation logic for the \"properties\" of your fragment (e.g., FJointNodePointer's validity)- Joint's compilation system will check them out even if you don't implement custom compilation logic for your fragment."})}),"\n",(0,o.jsx)(t.p,{children:"There are various ways to implement compilation logic for your custom fragments. You can implement it on either C++ side (using both runtime node instance or custom Editor node) or Blueprint side."}),"\n",(0,o.jsx)(t.h3,{id:"for-c-runtime-node-instance-side",children:"For C++ (Runtime Node Instance Side)"}),"\n",(0,o.jsx)(t.p,{children:"It's straight-forward."}),"\n",(0,o.jsxs)(t.p,{children:["You can override ",(0,o.jsx)(t.code,{children:"virtual void OnCompileNode_Implementation(TArray<FJointEdLogMessage>& LogMessages);"})," function in your runtime node class (fragment) and attach messages to the ",(0,o.jsx)(t.code,{children:"LogMessages"})," array."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"FJointEdLogMessage"})," structure contains the following members:"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Property"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description / Notes"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"Severity"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"EJointEdMessageSeverity"})}),(0,o.jsx)(t.td,{children:"Enum specifying the message severity level. (Info / Warning / PerformanceWarning / Error)"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"Message"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"FText"})}),(0,o.jsx)(t.td,{children:"Localized text content of the message."})]})]})]}),"\n",(0,o.jsx)(t.h3,{id:"for-c-editor-node-side",children:"For C++ (Editor Node Side)"}),"\n",(0,o.jsxs)(t.p,{children:["You can override ",(0,o.jsx)(t.code,{children:"virtual void OnCompileNode();"})," function in your custom Editor node class (derived from ",(0,o.jsx)(t.code,{children:"UJointEdGraphNode"}),") and attach messages to the ",(0,o.jsx)(t.code,{children:"CompileMessages"})," array."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, See how Joint Native's ",(0,o.jsx)(t.code,{children:"UJointEdFragment_Branch"})," implements custom error reporting when there is no condition fragment attached to the branch node."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'void UJointEdFragment_Branch::OnCompileNode()\r\n{\r\n\r\n\tSuper::OnCompileNode();\r\n\t\r\n\tif (GetCastedNodeInstance())\r\n\t{\r\n\t\tif (!GetCastedNodeInstance()->FindFragmentByClass(UDF_Condition::StaticClass()))\r\n\t\t{\r\n\t\t\tTSharedRef<FTokenizedMessage> TokenizedMessage = FTokenizedMessage::Create(EMessageSeverity::Info);\r\n\t\t\tTokenizedMessage->AddToken(FAssetNameToken::Create(GetJointManager() ? GetJointManager()->GetName() : "NONE"));\r\n\t\t\tTokenizedMessage->AddToken(FTextToken::Create(FText::FromString(":")));\r\n\t\t\tTokenizedMessage->AddToken(FUObjectToken::Create(this));\r\n\t\t\tTokenizedMessage->AddToken(FTextToken::Create(LOCTEXT("Compile_NoCondition","No condition node has been attached. Branch node must have one condition fragment as sub node to work properly. It will always return the nodes at the true pins if it has been played.")) );\r\n\t\t\tTokenizedMessage.Get().SetMessageLink(FUObjectToken::Create(this));\r\n\t\t\t\r\n\t\t\tCompileMessages.Add(TokenizedMessage);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"for-blueprints",children:"For Blueprints"}),"\n",(0,o.jsxs)(t.p,{children:["You can override ",(0,o.jsx)(t.code,{children:"On Compile Node"})," event in your custom fragment Blueprint to implement compilation logic."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_3.png",src:n(73256).A+"",width:"1052",height:"470"})}),"\n",(0,o.jsxs)(t.p,{children:["What you have to do is simply attaching messages to the output ",(0,o.jsx)(t.code,{children:"LogMessages"})," array."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"img_4.png",src:n(64775).A+"",width:"527",height:"232"})}),"\n",(0,o.jsxs)(t.p,{children:["LogMessages is an array of ",(0,o.jsx)(t.code,{children:"FJointEdLogMessage"})," structure."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"FJointEdLogMessage"})," structure contains the following members (same as C++ side):"]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Property"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description / Notes"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"Severity"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"EJointEdMessageSeverity"})}),(0,o.jsx)(t.td,{children:"Enum specifying the message severity level. (Info / Warning / PerformanceWarning / Error)"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"Message"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"FText"})}),(0,o.jsx)(t.td,{children:"Localized text content of the message."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},2782:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img-7aa4f38d755ce62687e79c99264c1723.png"},57306:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_1-389aacc8956dd45714e680b3e900cedb.png"},87473:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_2-59ecabbec4cad88d52fdcc92f39792cf.png"},73256:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_3-b0bc15100cc1ab962b74371f11aada01.png"},64775:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_4-77b769047c585bc7139a00ba779aac9e.png"},13813:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_6-b2f4a2b4674b0f35bcea843518a5a21e.png"},44716:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/img_7-7e1c98f8658ea28292a4541965e68374.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);