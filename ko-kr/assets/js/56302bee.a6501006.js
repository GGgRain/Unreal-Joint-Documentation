"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5161],{68172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=t(74848),i=t(28453);const s={title:"Controlling Graph Playback Flow",description:"Learn how to manipulate the playback of nodes in Joint.",sidebar_position:2,toc_min_heading_level:2,toc_max_heading_level:6},a=void 0,d={id:"guide_docs/Joint/Fundamentals/Playback-Flow/Playback-Flow",title:"Controlling Graph Playback Flow",description:"Learn how to manipulate the playback of nodes in Joint.",source:"@site/docs/guide_docs/Joint/Fundamentals/Playback-Flow/Playback-Flow.md",sourceDirName:"guide_docs/Joint/Fundamentals/Playback-Flow",slug:"/guide_docs/Joint/Fundamentals/Playback-Flow/",permalink:"/Unreal-Joint-Documentation/ko-kr/docs/guide_docs/Joint/Fundamentals/Playback-Flow/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide_docs/Joint/Fundamentals/Playback-Flow/Playback-Flow.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Controlling Graph Playback Flow",description:"Learn how to manipulate the playback of nodes in Joint.",sidebar_position:2,toc_min_heading_level:2,toc_max_heading_level:6},sidebar:"GuideSidebar",previous:{title:"Spawn & Manage Joint Actor Instance with Joint Subsystem",permalink:"/Unreal-Joint-Documentation/ko-kr/docs/guide_docs/Joint/Fundamentals/Managing-Joint-Actor-Instance/"},next:{title:"Node Execution Chain & Node Lifecycle",permalink:"/Unreal-Joint-Documentation/ko-kr/docs/guide_docs/Joint/Fundamentals/Node-Lifecycle/"}},r={},l=[{value:"Selecting Next Nodes to Play",id:"selecting-next-nodes-to-play",level:2},{value:"How Does It Work?",id:"how-does-it-work",level:3},{value:"Customizing Next Node Selection",id:"customizing-next-node-selection",level:3},{value:"Changing the starting point of graph on the runtime",id:"changing-the-starting-point-of-graph-on-the-runtime",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Joint provides a robust system for managing playback flow within its node-based architecture."}),"\n",(0,o.jsx)(n.p,{children:"Playback Flow controlling is one part of the core design of Joint, allowing users to easily and intuitively control the flow of execution of base nodes."}),"\n",(0,o.jsx)(n.h2,{id:"selecting-next-nodes-to-play",children:"Selecting Next Nodes to Play"}),"\n",(0,o.jsx)(n.h3,{id:"how-does-it-work",children:"How Does It Work?"}),"\n",(0,o.jsxs)(n.p,{children:["When a base node (node that can be placed directly on the graph by itself (e.g, ",(0,o.jsx)(n.code,{children:"foundation"}),")) is ended, Joint Actor will check for the next node to be played."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"img_2.png",src:t(51328).A+"",width:"1626",height:"637"})}),"\n",(0,o.jsxs)(n.p,{children:["And how it determines the next node is the interesting part: First, Joint Actor will call ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," function on the base node (in this example, ",(0,o.jsx)(n.code,{children:"foundation node"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's see how ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," is implemented on the ",(0,o.jsx)(n.code,{children:"foundation node"}),": it tries to call ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," on every sub nodes first, and if any of the sub nodes returns non-empty array of next nodes, it will use that as the next nodes to be played."]}),"\n",(0,o.jsxs)(n.p,{children:["But if none of the sub nodes returns any valid next nodes, it will return its own ",(0,o.jsx)(n.code,{children:"Next Node"})," property as the next node to be played."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"TArray<UJointNodeBase*> UJN_Foundation::SelectNextNodes_Implementation(AJointActor* InHostingJointInstance)\r\n{\r\n\tTArray<UJointNodeBase*> Nodes = Super::SelectNextNodes_Implementation(InHostingJointInstance);\r\n\r\n\tif(!Nodes.IsEmpty()) return Nodes;\r\n\t\r\n\treturn NextNode;\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"SelectNextNodes"}),"'s default implementation on the base class ",(0,o.jsx)(n.code,{children:"UJointNodeBase"})," is to iterate through every sub nodes and call ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," on them, and if any of them returns non-empty array of next nodes, it will use that as the next nodes to be played."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"to say, it's like a depth-first search on the node tree until it finds one that returns something, and returning that something as the next nodes to be played."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"TArray<UJointNodeBase*> UJointNodeBase::SelectNextNodes_Implementation(\r\n\tAJointActor* InHostingJointInstance)\r\n{\r\n\tfor (UJointNodeBase* SubNode : SubNodes)\r\n\t{\r\n\t\tif (SubNode == nullptr) continue;\r\n\r\n\t\tif(!SubNode->IsNodeBegunPlay()) continue;\r\n\r\n\t\t//Test through the sub nodes and if it has something then use that.\r\n\t\tTArray<UJointNodeBase*> Nodes = SubNode->SelectNextNodes(InHostingJointInstance);\r\n\t\tif (!Nodes.IsEmpty()) return Nodes;\r\n\t}\r\n\r\n\treturn TArray<UJointNodeBase*>();\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customizing-next-node-selection",children:"Customizing Next Node Selection"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["And what this means is that you can override the default behavior of ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," on your fragments and return whatever nodes you want as the next nodes to be played."]})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"UDF_Branch"})," node is a good example of this behavior: it checks the condition and returns either the TrueNode or FalseNode as the next node to be played."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"img_3.png",src:t(6153).A+"",width:"1044",height:"658"})}),"\n",(0,o.jsxs)(n.p,{children:["See how the ",(0,o.jsx)(n.code,{children:"UDF_Branch"})," node implements ",(0,o.jsx)(n.code,{children:"SelectNextNodes"})," to return either the TrueNode or FalseNode based on the condition check."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"img_1.png",src:t(29659).A+"",width:"1816",height:"622"})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:"It's important to notice that only the first node that returns non-empty array can determine the next nodes to be played. So you have to keep in mind the order of your nodes when you want to customize the next node selection."}),(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"It will traverse the nodes in DFS (Depth-First Search) order in the node tree from the base node."})})]}),"\n",(0,o.jsxs)(n.admonition,{type:"tip",children:[(0,o.jsx)(n.p,{children:"It might depend on the situation and your desired usages with the fragment, but for the most of the time you might don't want a node that has not begun play to affect the next node selection, so checking if the sub node is begun play and returning an empty array if it hasn't is important to avoid unwanted behaviors."}),(0,o.jsx)(n.p,{children:"Please notice that the 2 examples above also implement this check!"})]}),"\n",(0,o.jsx)(n.h3,{id:"changing-the-starting-point-of-graph-on-the-runtime",children:"Changing the starting point of graph on the runtime"}),"\n",(0,o.jsxs)(n.p,{children:["When you play a Joint manager, the Joint instance will pick up the first node on the ",(0,o.jsx)(n.strong,{children:"Start Node"})," list and play the Joint from there."]}),"\n",(0,o.jsx)(n.p,{children:"You can manually change this property on the runtime before you start off the Joint to change the point where you want to start your Joint from."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"img.png",src:t(21623).A+"",width:"1617",height:"536"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Notice the array must take base nodes only."})})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},21623:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/img-fbe8008fe607691a50003373424f49ef.png"},29659:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/img_1-64a9bee2dbb46b6c7605972424f3065d.png"},51328:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/img_2-9c5fb9dea9a12ba7c1c51f729aa00b6a.png"},6153:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/img_3-9b57b87c9d7fd2cf919ef2f2481d3d1e.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);